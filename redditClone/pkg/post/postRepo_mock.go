// Code generated by MockGen. DO NOT EDIT.
// Source: postRepo.go

// Package post is a generated GoMock package.
package post

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollectionHelper is a mock of CollectionHelper interface
type MockCollectionHelper struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionHelperMockRecorder
}

// MockCollectionHelperMockRecorder is the mock recorder for MockCollectionHelper
type MockCollectionHelperMockRecorder struct {
	mock *MockCollectionHelper
}

// NewMockCollectionHelper creates a new mock instance
func NewMockCollectionHelper(ctrl *gomock.Controller) *MockCollectionHelper {
	mock := &MockCollectionHelper{ctrl: ctrl}
	mock.recorder = &MockCollectionHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionHelper) EXPECT() *MockCollectionHelperMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockCollectionHelper) FindOne(ctx context.Context, filter interface{}) SingleResultHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, filter)
	ret0, _ := ret[0].(SingleResultHelper)
	return ret0
}

// FindOne indicates an expected call of FindOne
func (mr *MockCollectionHelperMockRecorder) FindOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCollectionHelper)(nil).FindOne), ctx, filter)
}

// InsertOne mocks base method
func (m *MockCollectionHelper) InsertOne(ctx context.Context, filter interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, filter)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockCollectionHelperMockRecorder) InsertOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionHelper)(nil).InsertOne), ctx, filter)
}

// DeleteOne mocks base method
func (m *MockCollectionHelper) DeleteOne(ctx context.Context, filter interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockCollectionHelperMockRecorder) DeleteOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCollectionHelper)(nil).DeleteOne), ctx, filter)
}

// Find mocks base method
func (m *MockCollectionHelper) Find(ctx context.Context, filter interface{}) (CursorHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter)
	ret0, _ := ret[0].(CursorHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockCollectionHelperMockRecorder) Find(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionHelper)(nil).Find), ctx, filter)
}

// FindOneAndReplace mocks base method
func (m *MockCollectionHelper) FindOneAndReplace(ctx context.Context, filter, v interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindOneAndReplace", ctx, filter, v)
}

// FindOneAndReplace indicates an expected call of FindOneAndReplace
func (mr *MockCollectionHelperMockRecorder) FindOneAndReplace(ctx, filter, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndReplace", reflect.TypeOf((*MockCollectionHelper)(nil).FindOneAndReplace), ctx, filter, v)
}

// MockSingleResultHelper is a mock of SingleResultHelper interface
type MockSingleResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockSingleResultHelperMockRecorder
}

// MockSingleResultHelperMockRecorder is the mock recorder for MockSingleResultHelper
type MockSingleResultHelperMockRecorder struct {
	mock *MockSingleResultHelper
}

// NewMockSingleResultHelper creates a new mock instance
func NewMockSingleResultHelper(ctrl *gomock.Controller) *MockSingleResultHelper {
	mock := &MockSingleResultHelper{ctrl: ctrl}
	mock.recorder = &MockSingleResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSingleResultHelper) EXPECT() *MockSingleResultHelperMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockSingleResultHelper) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockSingleResultHelperMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSingleResultHelper)(nil).Decode), v)
}

// MockCursorHelper is a mock of CursorHelper interface
type MockCursorHelper struct {
	ctrl     *gomock.Controller
	recorder *MockCursorHelperMockRecorder
}

// MockCursorHelperMockRecorder is the mock recorder for MockCursorHelper
type MockCursorHelperMockRecorder struct {
	mock *MockCursorHelper
}

// NewMockCursorHelper creates a new mock instance
func NewMockCursorHelper(ctrl *gomock.Controller) *MockCursorHelper {
	mock := &MockCursorHelper{ctrl: ctrl}
	mock.recorder = &MockCursorHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCursorHelper) EXPECT() *MockCursorHelperMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockCursorHelper) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockCursorHelperMockRecorder) Next(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCursorHelper)(nil).Next), ctx)
}

// Decode mocks base method
func (m *MockCursorHelper) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockCursorHelperMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCursorHelper)(nil).Decode), v)
}
