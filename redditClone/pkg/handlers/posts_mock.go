// Code generated by MockGen. DO NOT EDIT.
// Source: postHandler.go

// Package handlers is a generated GoMock package.
package handlers

import (
	gomock "github.com/golang/mock/gomock"
	post "rclone/pkg/post"
	reflect "reflect"
)

// MockPostRepositoryInterface is a mock of PostRepositoryInterface interface
type MockPostRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryInterfaceMockRecorder
}

// MockPostRepositoryInterfaceMockRecorder is the mock recorder for MockPostRepositoryInterface
type MockPostRepositoryInterfaceMockRecorder struct {
	mock *MockPostRepositoryInterface
}

// NewMockPostRepositoryInterface creates a new mock instance
func NewMockPostRepositoryInterface(ctrl *gomock.Controller) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostRepositoryInterface) EXPECT() *MockPostRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeletePost mocks base method
func (m *MockPostRepositoryInterface) DeletePost(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockPostRepositoryInterfaceMockRecorder) DeletePost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DeletePost), id)
}

// FindPost mocks base method
func (m *MockPostRepositoryInterface) FindPost(id string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPost", id)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPost indicates an expected call of FindPost
func (mr *MockPostRepositoryInterfaceMockRecorder) FindPost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).FindPost), id)
}

// GetAllPosts mocks base method
func (m *MockPostRepositoryInterface) GetAllPosts() (*[]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].(*[]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts
func (mr *MockPostRepositoryInterfaceMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetAllPosts))
}

// GetAllPostsByCategory mocks base method
func (m *MockPostRepositoryInterface) GetAllPostsByCategory(category string) (*[]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPostsByCategory", category)
	ret0, _ := ret[0].(*[]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPostsByCategory indicates an expected call of GetAllPostsByCategory
func (mr *MockPostRepositoryInterfaceMockRecorder) GetAllPostsGyCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPostsByCategory", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetAllPostsByCategory), category)
}

// GetAllPostsByLogin mocks base method
func (m *MockPostRepositoryInterface) GetAllPostsByLogin(login string) (*[]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPostsByLogin", login)
	ret0, _ := ret[0].(*[]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPostsByLogin indicates an expected call of GetAllPostsByLogin
func (mr *MockPostRepositoryInterfaceMockRecorder) GetAllPostsGyLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPostsByLogin", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetAllPostsByLogin), login)
}

// AddPost mocks base method
func (m *MockPostRepositoryInterface) AddPost(newPost *post.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", newPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost
func (mr *MockPostRepositoryInterfaceMockRecorder) AddPost(newPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).AddPost), newPost)
}

// AddCommentToPost mocks base method
func (m *MockPostRepositoryInterface) AddCommentToPost(posiId string, newComment post.Comment) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommentToPost", posiId, newComment)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommentToPost indicates an expected call of AddCommentToPost
func (mr *MockPostRepositoryInterfaceMockRecorder) AddCommentToPost(posiId, newComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommentToPost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).AddCommentToPost), posiId, newComment)
}

// DeleteCommentFromPost mocks base method
func (m *MockPostRepositoryInterface) DeleteCommentFromPost(posiId, comentId string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentFromPost", posiId, comentId)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentFromPost indicates an expected call of DeleteCommentFromPost
func (mr *MockPostRepositoryInterfaceMockRecorder) DeleteCommentFromPost(posiId, comentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentFromPost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DeleteCommentFromPost), posiId, comentId)
}

// UpvotePost mocks base method
func (m *MockPostRepositoryInterface) UpvotePost(posiId, userId string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", posiId, userId)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpvotePost indicates an expected call of UpvotePost
func (mr *MockPostRepositoryInterfaceMockRecorder) UpvotePost(posiId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).UpvotePost), posiId, userId)
}

// UnvotePost mocks base method
func (m *MockPostRepositoryInterface) UnvotePost(posiId, userId string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePost", posiId, userId)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnvotePost indicates an expected call of UnvotePost
func (mr *MockPostRepositoryInterfaceMockRecorder) UnvotePost(posiId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).UnvotePost), posiId, userId)
}

// DownvotePost mocks base method
func (m *MockPostRepositoryInterface) DownvotePost(posiId, userId string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvotePost", posiId, userId)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownvotePost indicates an expected call of DownvotePost
func (mr *MockPostRepositoryInterfaceMockRecorder) DownvotePost(posiId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvotePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DownvotePost), posiId, userId)
}
